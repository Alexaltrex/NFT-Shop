/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ReentrancyAttack,
  ReentrancyAttackInterface,
} from "../../contracts/ReentrancyAttack";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_shopAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "buyTokenFromShop",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "sellTokenToShop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610b91380380610b918339818101604052810190610032919061011d565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b60008060408385031215610134576101336100ba565b5b600061014285828601610108565b925050602061015385828601610108565b9150509250929050565b610a258061016c6000396000f3fe60806040526004361061004e5760003560e01c8063095ea7b31461018c57806312065fe0146101b5578063150b7a02146101e0578063ae82198b1461021d578063b319173a1461023957610187565b3661018757606460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d17be5496040518163ffffffff1660e01b815260040160206040518083038186803b1580156100bb57600080fd5b505afa1580156100cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f3919061055e565b106101855760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b319173a60016040518263ffffffff1660e01b815260040161015291906105d0565b600060405180830381600087803b15801561016c57600080fd5b505af1158015610180573d6000803e3d6000fd5b505050505b005b600080fd5b34801561019857600080fd5b506101b360048036038101906101ae919061065e565b610262565b005b3480156101c157600080fd5b506101ca6102f5565b6040516101d791906106ad565b60405180910390f35b3480156101ec57600080fd5b506102076004803603810190610202919061080e565b6102fd565b60405161021491906108cc565b60405180910390f35b610237600480360381019061023291906108e7565b610311565b005b34801561024557600080fd5b50610260600480360381019061025b91906108e7565b610486565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b81526004016102bf929190610923565b600060405180830381600087803b1580156102d957600080fd5b505af11580156102ed573d6000803e3d6000fd5b505050505050565b600047905090565b600063150b7a0260e01b9050949350505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e68fe9226040518163ffffffff1660e01b815260040160206040518083038186803b15801561037a57600080fd5b505afa15801561038e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b2919061055e565b90508034146103f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ed906109cf565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae82198b34846040518363ffffffff1660e01b815260040161045091906106ad565b6000604051808303818588803b15801561046957600080fd5b505af115801561047d573d6000803e3d6000fd5b50505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b319173a826040518263ffffffff1660e01b81526004016104df91906106ad565b600060405180830381600087803b1580156104f957600080fd5b505af115801561050d573d6000803e3d6000fd5b5050505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61053b81610528565b811461054657600080fd5b50565b60008151905061055881610532565b92915050565b6000602082840312156105745761057361051e565b5b600061058284828501610549565b91505092915050565b6000819050919050565b6000819050919050565b60006105ba6105b56105b08461058b565b610595565b610528565b9050919050565b6105ca8161059f565b82525050565b60006020820190506105e560008301846105c1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610616826105eb565b9050919050565b6106268161060b565b811461063157600080fd5b50565b6000813590506106438161061d565b92915050565b60008135905061065881610532565b92915050565b600080604083850312156106755761067461051e565b5b600061068385828601610634565b925050602061069485828601610649565b9150509250929050565b6106a781610528565b82525050565b60006020820190506106c2600083018461069e565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61071b826106d2565b810181811067ffffffffffffffff8211171561073a576107396106e3565b5b80604052505050565b600061074d610514565b90506107598282610712565b919050565b600067ffffffffffffffff821115610779576107786106e3565b5b610782826106d2565b9050602081019050919050565b82818337600083830152505050565b60006107b16107ac8461075e565b610743565b9050828152602081018484840111156107cd576107cc6106cd565b5b6107d884828561078f565b509392505050565b600082601f8301126107f5576107f46106c8565b5b813561080584826020860161079e565b91505092915050565b600080600080608085870312156108285761082761051e565b5b600061083687828801610634565b945050602061084787828801610634565b935050604061085887828801610649565b925050606085013567ffffffffffffffff81111561087957610878610523565b5b610885878288016107e0565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6108c681610891565b82525050565b60006020820190506108e160008301846108bd565b92915050565b6000602082840312156108fd576108fc61051e565b5b600061090b84828501610649565b91505092915050565b61091d8161060b565b82525050565b60006040820190506109386000830185610914565b610945602083018461069e565b9392505050565b600082825260208201905092915050565b7f5265656e7472616e637941747461636b3a206e6f7420656e6f7567682065746860008201527f65727320666f7220627579000000000000000000000000000000000000000000602082015250565b60006109b9602b8361094c565b91506109c48261095d565b604082019050919050565b600060208201905081810360008301526109e8816109ac565b905091905056fea2646970667358221220d977aca722622863dae3d1fdc6c2d991313e3541ae483d80b5d348b9ac76613564736f6c63430008090033";

type ReentrancyAttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReentrancyAttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReentrancyAttack__factory extends ContractFactory {
  constructor(...args: ReentrancyAttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _shopAddress: PromiseOrValue<string>,
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ReentrancyAttack> {
    return super.deploy(
      _shopAddress,
      _tokenAddress,
      overrides || {}
    ) as Promise<ReentrancyAttack>;
  }
  override getDeployTransaction(
    _shopAddress: PromiseOrValue<string>,
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _shopAddress,
      _tokenAddress,
      overrides || {}
    );
  }
  override attach(address: string): ReentrancyAttack {
    return super.attach(address) as ReentrancyAttack;
  }
  override connect(signer: Signer): ReentrancyAttack__factory {
    return super.connect(signer) as ReentrancyAttack__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReentrancyAttackInterface {
    return new utils.Interface(_abi) as ReentrancyAttackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReentrancyAttack {
    return new Contract(address, _abi, signerOrProvider) as ReentrancyAttack;
  }
}
