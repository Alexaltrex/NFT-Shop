/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace NFTShop {
  export type AuctionStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    startAt: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
  };

  export type AuctionStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    tokenId: BigNumber;
    seller: string;
    startAt: BigNumber;
    price: BigNumber;
  };
}

export interface NFTShopInterface extends utils.Interface {
  functions: {
    "FEE()": FunctionFragment;
    "addTokenToAuction(uint256,uint256)": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "buyTokenFromAuction(uint256)": FunctionFragment;
    "buyTokenFromShop(uint256)": FunctionFragment;
    "getAuctionPrice(uint256)": FunctionFragment;
    "getAuctions()": FunctionFragment;
    "getShopBalance()": FunctionFragment;
    "getTokenPriceForBuy()": FunctionFragment;
    "getTokenPriceForSell()": FunctionFragment;
    "isTokenOnAuction(uint256)": FunctionFragment;
    "nftToken()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeTokenFromAuction(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellTokenToShop(uint256)": FunctionFragment;
    "setTokenPriceForBuy(uint256)": FunctionFragment;
    "setTokenPriceForSell(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE"
      | "addTokenToAuction"
      | "auctions"
      | "buyTokenFromAuction"
      | "buyTokenFromShop"
      | "getAuctionPrice"
      | "getAuctions"
      | "getShopBalance"
      | "getTokenPriceForBuy"
      | "getTokenPriceForSell"
      | "isTokenOnAuction"
      | "nftToken"
      | "onERC721Received"
      | "owner"
      | "removeTokenFromAuction"
      | "renounceOwnership"
      | "sellTokenToShop"
      | "setTokenPriceForBuy"
      | "setTokenPriceForSell"
      | "transferOwnership"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addTokenToAuction",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenFromAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenFromShop",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShopBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceForBuy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceForSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenOnAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "nftToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTokenFromAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokenToShop",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPriceForBuy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPriceForSell",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTokenToAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenFromAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenFromShop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShopBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceForBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceForSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenOnAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenFromAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTokenToShop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPriceForBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPriceForSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "AddTokenToAuction(uint256,address,uint256,uint256)": EventFragment;
    "BuyFromShop(address,uint256,uint256,uint256)": EventFragment;
    "BuyPriceChange(uint256,uint256,uint256)": EventFragment;
    "BuyTokenFromAuction(uint256,uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveTokenFromAuction(uint256,address,uint256)": EventFragment;
    "SellPriceChange(uint256,uint256,uint256)": EventFragment;
    "SellToShop(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddTokenToAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyFromShop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyPriceChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyTokenFromAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveTokenFromAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellPriceChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellToShop"): EventFragment;
}

export interface AddTokenToAuctionEventObject {
  tokenId: BigNumber;
  seller: string;
  startAt: BigNumber;
  price: BigNumber;
}
export type AddTokenToAuctionEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  AddTokenToAuctionEventObject
>;

export type AddTokenToAuctionEventFilter =
  TypedEventFilter<AddTokenToAuctionEvent>;

export interface BuyFromShopEventObject {
  buyer: string;
  tokenId: BigNumber;
  price: BigNumber;
  timestamp: BigNumber;
}
export type BuyFromShopEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  BuyFromShopEventObject
>;

export type BuyFromShopEventFilter = TypedEventFilter<BuyFromShopEvent>;

export interface BuyPriceChangeEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
  timestamp: BigNumber;
}
export type BuyPriceChangeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  BuyPriceChangeEventObject
>;

export type BuyPriceChangeEventFilter = TypedEventFilter<BuyPriceChangeEvent>;

export interface BuyTokenFromAuctionEventObject {
  tokenId: BigNumber;
  price: BigNumber;
  buyer: string;
  timestamp: BigNumber;
}
export type BuyTokenFromAuctionEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  BuyTokenFromAuctionEventObject
>;

export type BuyTokenFromAuctionEventFilter =
  TypedEventFilter<BuyTokenFromAuctionEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveTokenFromAuctionEventObject {
  tokenId: BigNumber;
  seller: string;
  timestamp: BigNumber;
}
export type RemoveTokenFromAuctionEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RemoveTokenFromAuctionEventObject
>;

export type RemoveTokenFromAuctionEventFilter =
  TypedEventFilter<RemoveTokenFromAuctionEvent>;

export interface SellPriceChangeEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
  timestamp: BigNumber;
}
export type SellPriceChangeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SellPriceChangeEventObject
>;

export type SellPriceChangeEventFilter = TypedEventFilter<SellPriceChangeEvent>;

export interface SellToShopEventObject {
  seller: string;
  tokenId: BigNumber;
  price: BigNumber;
  timestamp: BigNumber;
}
export type SellToShopEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SellToShopEventObject
>;

export type SellToShopEventFilter = TypedEventFilter<SellToShopEvent>;

export interface NFTShop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addTokenToAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        seller: string;
        startAt: BigNumber;
        price: BigNumber;
      }
    >;

    buyTokenFromAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTokenFromShop(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAuctionPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctions(
      overrides?: CallOverrides
    ): Promise<[NFTShop.AuctionStructOutput[]]>;

    getShopBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenPriceForBuy(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenPriceForSell(overrides?: CallOverrides): Promise<[BigNumber]>;

    isTokenOnAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nftToken(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeTokenFromAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellTokenToShop(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenPriceForBuy(
      tokenPriceForBuy_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenPriceForSell(
      tokenPriceForSell_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  FEE(overrides?: CallOverrides): Promise<BigNumber>;

  addTokenToAuction(
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  auctions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber] & {
      tokenId: BigNumber;
      seller: string;
      startAt: BigNumber;
      price: BigNumber;
    }
  >;

  buyTokenFromAuction(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTokenFromShop(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAuctionPrice(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctions(
    overrides?: CallOverrides
  ): Promise<NFTShop.AuctionStructOutput[]>;

  getShopBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenPriceForBuy(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenPriceForSell(overrides?: CallOverrides): Promise<BigNumber>;

  isTokenOnAuction(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nftToken(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeTokenFromAuction(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellTokenToShop(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenPriceForBuy(
    tokenPriceForBuy_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenPriceForSell(
    tokenPriceForSell_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addTokenToAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        seller: string;
        startAt: BigNumber;
        price: BigNumber;
      }
    >;

    buyTokenFromAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokenFromShop(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuctionPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctions(
      overrides?: CallOverrides
    ): Promise<NFTShop.AuctionStructOutput[]>;

    getShopBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceForBuy(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceForSell(overrides?: CallOverrides): Promise<BigNumber>;

    isTokenOnAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nftToken(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeTokenFromAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellTokenToShop(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenPriceForBuy(
      tokenPriceForBuy_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenPriceForSell(
      tokenPriceForSell_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddTokenToAuction(uint256,address,uint256,uint256)"(
      tokenId?: null,
      seller?: null,
      startAt?: null,
      price?: null
    ): AddTokenToAuctionEventFilter;
    AddTokenToAuction(
      tokenId?: null,
      seller?: null,
      startAt?: null,
      price?: null
    ): AddTokenToAuctionEventFilter;

    "BuyFromShop(address,uint256,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      tokenId?: null,
      price?: null,
      timestamp?: null
    ): BuyFromShopEventFilter;
    BuyFromShop(
      buyer?: PromiseOrValue<string> | null,
      tokenId?: null,
      price?: null,
      timestamp?: null
    ): BuyFromShopEventFilter;

    "BuyPriceChange(uint256,uint256,uint256)"(
      oldValue?: null,
      newValue?: null,
      timestamp?: null
    ): BuyPriceChangeEventFilter;
    BuyPriceChange(
      oldValue?: null,
      newValue?: null,
      timestamp?: null
    ): BuyPriceChangeEventFilter;

    "BuyTokenFromAuction(uint256,uint256,address,uint256)"(
      tokenId?: null,
      price?: null,
      buyer?: null,
      timestamp?: null
    ): BuyTokenFromAuctionEventFilter;
    BuyTokenFromAuction(
      tokenId?: null,
      price?: null,
      buyer?: null,
      timestamp?: null
    ): BuyTokenFromAuctionEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RemoveTokenFromAuction(uint256,address,uint256)"(
      tokenId?: null,
      seller?: null,
      timestamp?: null
    ): RemoveTokenFromAuctionEventFilter;
    RemoveTokenFromAuction(
      tokenId?: null,
      seller?: null,
      timestamp?: null
    ): RemoveTokenFromAuctionEventFilter;

    "SellPriceChange(uint256,uint256,uint256)"(
      oldValue?: null,
      newValue?: null,
      timestamp?: null
    ): SellPriceChangeEventFilter;
    SellPriceChange(
      oldValue?: null,
      newValue?: null,
      timestamp?: null
    ): SellPriceChangeEventFilter;

    "SellToShop(address,uint256,uint256,uint256)"(
      seller?: PromiseOrValue<string> | null,
      tokenId?: null,
      price?: null,
      timestamp?: null
    ): SellToShopEventFilter;
    SellToShop(
      seller?: PromiseOrValue<string> | null,
      tokenId?: null,
      price?: null,
      timestamp?: null
    ): SellToShopEventFilter;
  };

  estimateGas: {
    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addTokenToAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTokenFromAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTokenFromShop(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAuctionPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    getShopBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceForBuy(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceForSell(overrides?: CallOverrides): Promise<BigNumber>;

    isTokenOnAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftToken(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeTokenFromAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellTokenToShop(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenPriceForBuy(
      tokenPriceForBuy_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenPriceForSell(
      tokenPriceForSell_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTokenToAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTokenFromAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTokenFromShop(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAuctionPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getShopBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPriceForBuy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPriceForSell(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenOnAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTokenFromAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellTokenToShop(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenPriceForBuy(
      tokenPriceForBuy_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenPriceForSell(
      tokenPriceForSell_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
